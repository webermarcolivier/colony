/***************************************************************************//**
 * Project: Colony
 *
 * \file    debug.h
 * \author  Marc Weber\n
 *          The SiMBioSys group (CosmoLab)\n
 *          Parc CientÃ­fic de Barcelona\n
 *          Barcelona, Spain.\n
 *          http://www.thesimbiosys.com
 * \version 1.0
 * \date    11/2009
 *
 *          Copyright 2009 by Marc Weber
 ******************************************************************************/

#ifndef DEBUG
#define DEBUG

  /** SIMULATION OPTIONS */

  /**
   * If defined, the simulation will use the Chemical Langevin Equation (CLE)
   * to integrate the dynamics of the system.
   * If not defined, the simulation will use a modified Gillespie algorithm.
   */
  //#define USE_CHEMICAL_LANGEVIN


  /**
   * This option enables the dependence in time of the propensities of the
   * reactions, modelizing the cell growth.
   */
  #define TIME_DEPENDENT_PROPENSITIES

  /**
   * This option sets the initial cell cycle phases of the cells as a random
   * variable in [0,2pi]. Otherwise they are all set to zero.
   */
  #ifdef TIME_DEPENDENT_PROPENSITIES
    //#define RANDOM_INITIAL_PHASES
  #endif

  /**
   * This option enables the computation of the first passage-time for
   * reaction network that have a switch-like behavior. A certain threshold
   * in the concentration of one species (for example, GFP) is set in the
   * simulator class. After each simulation step, the concentration of the defined species
   * is compared to the threshold, and if above, the simulation stops and the
   * simulation time is recorded in an array. It is necessary to set the simulation step
   * to a small value in order to get sufficient precision in the time. The threshold
   * condition is not evaluated during the computation of a simulation step, therefore,
   * the precision of the first-passage time is the simulation step.
   * Usually, we use only one cell in order to speed up the computation. The threshold
   * is tested only in the cell with index 0.
   */
   //#define FIRST_PASSAGE_TIME_COMPUTATION


  /** OPTIMIZATION OPTIONS */

  /**
   * This option enables an optimization for computing the propensities.
   * Instead of computing all the propensities at each time step, it
   * calculates the propensities in the cell where the last reaction happened
   * and the propensities of the cell-milieu (external) reactions if necessary.
   * In the case of time independent propensities, this optimization is exact
   * because the propensities of the cells in which no reaction happened do not
   * change.
   * In the case of time-dependent reactions, this optimization can induce an
   * additional error, because at each time step, all the time dependent
   * propensities change. We suppose that the time step is very small
   * (total sum of propensities >> 1), in such a way that in the time interval
   * between two reactions in one cell, the change in the time dependent
   * propensities is very small. The time dependence of the propensities depends
   * on the cell growth, which is assumed to be a slow process compared to the
   * other reactions (degradation, DNA binding, etc).
   */
  #ifndef FIRST_PASSAGE_TIME_COMPUTATION
  // In the first passage simulation, we only use 1 cell and thus we switch off the
  // optimize compute propensities option.
    #define OPTIMIZE_COMPUTE_PROPENSITIES
  #endif

  /**
   * This option recompute all the propensities at the end of each time slice,
   * in order to reduce the errors generated by the optimization method.
   */
  #ifdef OPTIMIZE_COMPUTE_PROPENSITIES
    #define OPTIMIZE_COMPUTE_PROPENSITIES_UPDATE
  #endif

  // Define the single or double precision version of the ODE library
  #define dDOUBLE




  /** OUTPUT OPTIONS */

  /**
   * Compile the graphical user interface.
   * * USER INTERFACE IS BROKEN DUE TO: created the user interface file with old version of qt designer, which is now not compatible. See more information at: http://qt-project.org/doc/qt-4.8/porting4-designer.html
   */
  //#define GUI

  /**
   * If the cell density stays constant, apply a different rule for choosing which cell to delete:
   * delete the cells farther away from the center. This makes a nicer movement
   * of the cells when you want to make a movie of the simulation.
   */
  #ifdef GUI
    #define RULE_DELETE_FARTHEST_CELL
  #endif

  /**
   * Print to the terminal the division events.
   */
  //#define PRINT_CELL_DIVISION_EVENT

  /**
   * This option outputs all the trajectories. Otherwise, we output only the
   * first 5 trajectories.
   */
  #define WRITE_ALL_TRAJECTORIES

  /**
   * Write the average over the cells for each trajectory.
   */
  #define WRITE_CELLS_AVG

  /**
   * Write the average over the cells and over all trajectories.
   */
  #define WRITE_CELLS_TRAJ_AVG

  /**
   * Write the cell lineage for each trajectory.
   */
  #ifdef TIME_DEPENDENT_PROPENSITIES
    #define WRITE_CELL_LINEAGE
  #endif

  /**
   * Write the cell cycle phases of all the cells at the end (t=tsimulation)
   * of the last trajectory.
   */
  //#define WRITE_CELL_CYCLE_PHASES_TIME_END



  /** OPTIONS FOR THE DEBUGGING MODE */

  // For activating the profiling with gprof, uncomment the lines with the Q_MAKE flags
  // in the project file (COLONY.pro)

  //#define BUILD_DEBUG
//  #ifdef BUILD_DEBUG

//    // Debugging options
//    #define COMPUTEPROPENSITIES_ARRAY_SIZE_CHECK
//    #define COMPUTEPROPENSITIES_POSITIVITY_CHECK
//    #define COMPUTEPROPENSITIES_TIME_CYCLE_CHECK
//    #define X_POSITIVITY_CHECK
//    #ifndef PRINT_CELL_DIVISION_EVENT
//      #define PRINT_CELL_DIVISION_EVENT
//    #endif
//    #define SUM_OF_PROPENSITIES_CHECK

//  #endif // BUILD_DEBUG

#endif // DEBUG
