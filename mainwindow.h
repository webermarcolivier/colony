/***************************************************************************//**
 * Project: Colony
 *
 * \file    mainwindow.h
 * \author  Marc Weber\n
 *          The SiMBioSys group (CosmoLab)\n
 *          Parc Cient√≠fic de Barcelona\n
 *          Barcelona, Spain.\n
 *          http://www.thesimbiosys.com
 * \version 1.0
 * \date    11/2009
 *
 *          Copyright 2009 by Marc Weber
 ******************************************************************************/

#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include "compilation_options.h"

#ifdef GUI

// standard C++ header files
#include <algorithm>
#include <cmath>
#include <string>

// libraries header files
#include <blitz/array.h>
#include <QApplication>
#include <QMainWindow>
#include <QString>
#include <QAbstractItemModel>
#include <QGraphicsItem>
#include <QGraphicsScene>
#include <QGraphicsRectItem>
#include <QStringListModel>
#include <QRect>
#include <QTimer>

// user header files
#include "Simulator.h"
#include "StringTableModel.h"
#include "CellLineageGeneration.h"
#include "Param/GraphicsCellCompositeParam.h"

// namespaces
using blitz::Array;

class GraphicsCellScene;

namespace Ui
{
    class MainWindow;
}

/**
  * Main Qt window.
  * This graphical user interface offers a basic play/pause buttons for running/pausing the simulation,
  * a table view of the global parameters, a graphical view of the cell colony with color code for the cells
  * and the background based on the species concentration and a table view of the selected cell's state.
  *
  * Dynamics of the cells are calculated with the Open Dynamics Engine (ODE) library in the GraphicsCellSceneODE #colonyScene_.
  */
class MainWindow : public QMainWindow
{
  Q_OBJECT

public:
  MainWindow(string inputFile, QWidget *parent = 0);
  ~MainWindow();

  int getSimulatorITimeSlice() const;

  double getCellLength0() const;
  double getCellHeight0() const;

signals:

  void updateNCells(int nCells);
  void updateTimeSimulation(QString);
  void updateTotalTimeSimulation(QString);
  void updateTrajectoryCounter(QString);
  void updateParameterSetCounter(QString);
  void updateSimulationProgressBar(int);

public slots:

  /**
    * Run the simulation.
    */
  void runSimulation();
  /**
    * Play/Pause the simulation.
    */
  void playPauseSimulation();
  /**
    * Play/resume the simulation.
    */
  void playSimulation();
  /**
    * Pause the simulation.
    */
  void pauseSimulation();
  /**
    * When the zoom slider changes value, we change the scaling factor of the Ui::MainWindow::colonyView.
    */
  void on_zoomSlider_valueChanged(int zoomValue);
  void setSpeciesCellColorIndex(int index);
  void setSpeciesCellColorMaxValue(double max);
  void setSpeciesBackgroundColorIndex(int index);
  void setSpeciesBackgroundColorMaxValue(double max);
  /**
    * When a cell looses focus, we display the milieu's state in the Ui::MainWindow::cellStateTableView.
    */
  void cellLostFocus(GraphicsCellQt *cell);
  /**
    * When a cell gains focus, we display it's state in the Ui::MainWindow::cellStateTableView.
    */
  void cellGainedFocus(GraphicsCellQt *cell);
  /**
    * Rescale and translate view to fit the graphic items.
    */
  void fitInView();


private:

  /**
    * The MainWindow class generated by the Qt Designer.
    */
  Ui::MainWindow *ui;

  /**
    * A pointer to the Simulator object.
    * The graphical interface has to communicate with the Simulator class in order to perform simulation steps,
    * get cell's concentrations and volume, send cell positions and angle.
    */
  Simulator *simulator_;

  void endSimulation();


  /**
    * Perform all the updates of the different widgets, including the graphics scene #colonyScene_.
    */
  void updateWindow();


  // Simulation progress
  bool simulationEnd_;
  bool simulationPaused_;
  double lastUpdateTime_;
  int calculateSimulationTotalProgress();

  // Colony view
  float cellLength0_;
  float cellHeight0_;
  /**
    * The colony graphics scene where cells are drawn.
    * In this graphics scene, cells are drawn as elongated cylinders. At each simulation step, we set the color of the cells
    * according to the cell's color code as well as the color of the background according to the milieu's color code.
    * The color of the cells and the background follow a color gradient based on the concentration of the selected species
    * and the selected maximum value.
    */
  GraphicsCellScene colonyScene_;
  qreal zoomValue_;
  GraphicsCellCompositeParam graphicsCellParam_;
  /**
    * Initiate both the model and view of the colony graphics view.
    */
  void initiateColonyView();
  /**
    * Update the colony view.
    */
  void updateColonyView();


  // Global parameters table
  /**
    * Get the array of global parameters from the simulator.
    */
  Array<QString,2> getGlobalParameterArray();
  /**
    * Initiate the global parameter table.
    * Both the model #globalParameterModel_ and the view Ui::MainWindow::globalParameterTableView are initialized.
    */
  void initiateGlobalParameterTable();
  /**
    * Update the global parameter table. Calls #getGlobalParameterArray() and updates the #globalParameterModel_.
    */
  void updateGlobalParameterTable();
  /**
    * The global parameters model.
    *  @see Ui::MainWindow::globalParameterTableView
    */
  QAbstractItemModel *globalParameterModel_;


  // Cell state table
  /**
    * Get the cell state array from the simulator.
    * @param cellIndex The index of the cell, from 0 to nCells-1, the index -1 stays for the milieu.
    */
  Array<QString,2> getCellStateArray(int cellIndex);
  /**
    * Initiate and create the cell state table model for the cell state table view.
    * The model contains the data and the view manages how the data is shown on screen.
    * @param cellIndex The index of the cell, from 0 to nCells-1, the index -1 stays for the milieu.
    */
  void initiateCellStateTable(int cellIndex);
  /**
    * Update the cell state table. Calls #getCellStateArray() and updates the cell state model.
    */
  void updateCellStateTable();
  /**
    * The cell state model.
    * @see Ui::MainWindow::cellStateTableView
    */
  QAbstractItemModel *cellStateModel_;
  /**
    * The index of the cell which state is displayed in the Ui::MainWindow::cellStateTableView.
    * An index of -1 stays for the milieu.
    */
  int cellStateIndex_;


  // Color Code Cell
  /**
    * Initiate the list of species name in the combobox based on species name list from the Simulator.
    * @see #speciesNameListModel_
    * @see Ui::MainWindow::speciesColorComboBox
    */
  void initiateSpeciesColorComboBox();
  /**
    * Initiate the color code graphics scene (rectangle with color code gradient).
    * @see #speciesColorCodeScene_
    */
  void initiateSpeciesColorCodeView();
  /**
    * This method is not working...
    */
  void updateSpeciesColorCodeView();
  /**
    * Compute the color gradient for the color code of the cells.
    */
  QColor gradientColor(double r);
  /**
    * The list model for the species names of the cells, the selected species concentration is used for the color code of the cells.
    * @see #speciesCellColorIndex_
    * @see #speciesCellColorMaxValue_
    */
  QStringListModel speciesNameListModel_;
  /**
    * The index of the species (in the species name list #speciesNameListModel_)
    * that is used for the color code of the cells.
    */
  int speciesCellColorIndex_;
  /**
    * Set the maximum value for the scale of species concentration for the color code of the cells.
    * The color code is a color gradient based on concentration scale 0 to #speciesCellColorMaxValue_.
    */
  double speciesCellColorMaxValue_;
  /**
    * The graphics scene of the color code gradient for the cells, associated to the Ui::MainWindow::colorCodeGraphicsView.
    * This is a small rectangle with the color code gradient inside, for better visualization of the color code scale.
    */
  QGraphicsScene speciesColorCodeScene_;
  /**
    * First color of reference for the color code gradient for the cells.
    * @see #gradientColor()
    */
  QColor gradColor1_;
  /**
    * Second color of reference for the color code gradient for the cells.
    * @see #gradientColor()
    */
  QColor gradColor2_;


  // Color Code Background
  /**
    * Initiate the list of species name in the combobox based on species name list from the Simulator.
    * @see #speciesMilieuNameListModel_
    * @see Ui::MainWindow::speciesColorBackgroundComboBox
    */
  void initiateSpeciesColorBackgroundComboBox();
  /**
    * Initiate the color code graphics scene (rectangle with color code gradient).
    * @see #speciesColorCodeBackgroundScene_
    */
  void initiateSpeciesColorBackgroundCodeView();
  /**
    * This method is not working...
    */
  void updateSpeciesColorBackgroundCodeView();
  /**
    * Compute the color gradient for the color code of the background.
    */
  QColor gradientColorBackground(double r);
  /**
    * First color of reference for the color code gradient for the background.
    * @see #gradientColorBackground()
    */
  QColor gradColorBackground1_;
  /**
    * Second color of reference for the color code gradient for the background.
    * @see #gradientColorBackground()
    */
  QColor gradColorBackground2_;
  /**
    * The list model for the species names of the milieu, the selected species concentration is used for the color code of the background.
    * @see #speciesBackgroundColorIndex_
    * @see #speciesBackgroundColorMaxValue_
    */
  QStringListModel speciesMilieuNameListModel_;
  /**
    * The index of the species (in the species name list #speciesMilieuNameListModel_)
    * that is used for the color code of the background.
    */
  int speciesBackgroundColorIndex_;
  /**
    * Set the maximum value for the scale of species concentration for the color code of the background.
    * The color code is a color gradient based on concentration scale 0 to #speciesBackgroundColorMaxValue_.
    */
  double speciesBackgroundColorMaxValue_;
  /**
    * The graphics scene of the color code gradient for the background, associated to the Ui::MainWindow::colorCodeBackgroundGraphicsView.
    * This is a small rectangle with the color code gradient inside, for better visualization of the color code scale.
    */
  QGraphicsScene speciesColorCodeBackgroundScene_;
};

#include "GraphicsCellScene.h"

#endif // GUI

#endif // MAINWINDOW_H
